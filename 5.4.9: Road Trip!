import java.util.*;

public class RoadTrip
{
    private ArrayList<GeoLocation> roadTrip = new ArrayList<GeoLocation>();
    private int numStops = 0;

    // Create a GeoLocation and add it to the road trip
    public void addStop(String name, double latitude, double longitude)
    {
        GeoLocation city = new GeoLocation(name, latitude, longitude);
        roadTrip.add(city);
        numStops++;
    }

    // Get the total number of stops in the trip
    public int getNumberOfStops()
    {
        return numStops;
    }

    // Get the total miles of the trip
    public double getTripLength()
    {
        double tripLength = 0;
        for(int i = 0; i < numStops - 1; i++)
        {
            tripLength += roadTrip.get(i).distanceFrom(roadTrip.get(i+1));
        }
        return tripLength;
    }

    // Return a formatted toString of the trip
    public String toString()
    {
        String itinerary = "";
        int number = 1;
        for(int i = 0; i < numStops; i++)
        {
            itinerary += number + ". " + roadTrip.get(i) + "\n";
            number++;
        }
        return itinerary;
    }
}

//GeoLocation Code

/*
 * This class stores information about a location on Earth.  Locations are
 * specified using latitude and longitude.  The class includes a method for
 * computing the distance between two locations.
 *
 * This implementation is based off of the example from Stuart Reges at 
 * the University of Washington.
 */

public class GeoLocation 
{
    // Earth radius in miles
    public static final double RADIUS = 3963.1676;

    private String name;
    private double latitude;
    private double longitude;

    
    public GeoLocation(String name, double theLatitude, double theLongitude) 
    {
        this.name = name;
        latitude = theLatitude;
        longitude = theLongitude;
    }

   
     
    public double getLatitude() 
    {
        return latitude;
    }

    /**
     * returns the longitude of this geo location
     */
    public double getLongitude() 
    {
        return longitude;
    }

    // returns a string representation of this geo location
    public String toString() 
    {
        return name + " (" + latitude + ", " + longitude + ")";
    }

    // returns the distance in miles between this geo location and the given
    // other geo location
    public double distanceFrom(GeoLocation other) 
    {
        double lat1 = Math.toRadians(latitude);
        double long1 = Math.toRadians(longitude);
        double lat2 = Math.toRadians(other.latitude);
        double long2 = Math.toRadians(other.longitude);
        // apply the spherical law of cosines with a triangle composed of the
        // two locations and the north pole
        double theCos = Math.sin(lat1) * Math.sin(lat2) +
            Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);
        double arcLength = Math.acos(theCos);
        return arcLength * RADIUS;
    }
}
